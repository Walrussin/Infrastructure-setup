- name: Install yum-utils
  dnf:
    name: yum-utils
    state: latest

- name: Add official HashiCorp Linux repository.
  command: sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo

- name: Install Vault
  dnf:
    name: vault
    state: latest

- name: Copy certs to vault directory
  copy:
    src: "/etc/letsencrypt/live/{{ acme_domain }}/cert.pem"
    dest: /opt/vault/tls/tls.crt
    owner: vault
    group: vault
    force: True
    mode: 0600

- name: Copy certs to vault directory
  copy:
    src: "/etc/letsencrypt/live/{{ acme_domain }}/privkey.pem"
    dest: /opt/vault/tls/tls.key
    owner: vault
    group: vault
    force: True
    mode: 0600   

- name: Start Vault
  systemd:
    name: vault
    enabled: True
    state: started

- name: initialize Vault with the API
  uri:
    url: "https://127.0.0.1:8200/v1/sys/init"
    method: POST
    headers:
      content-type: "application/json"
    body: '{"secret_shares": 5, "secret_threshold": 3}'
    validate_certs: no
  register: vault_init_res

- name: Print output
  debug:
    msg: "{{ vault_init_res }}"

- name: Set VAULT_TOKEN
  set_fact:
    VAULT_TOKEN: "{{ vault_init_res.json.root_token }}"
  environment:
    VAULT_TOKEN: "{{ vault_init_res.json.root_token }}"

- name: Create directory
  file:
    path: "/root/vault/keys/"
    state: directory
    mode: "0750"

- name: Save init to file
  copy:
    content: "{{ vault_init_res }}"
    dest: /root/vault/keys/init.json

- name: Unseal vault via API
  uri:
    url: "https://127.0.0.1:8200/v1/sys/unseal"
    method: POST
    headers:
      content-type: "application/json"
    body_format: json
    body: '{"key": "{{ item }}"}'
    validate_certs: no
  loop: "{{ vault_init_res.json.keys_base64 }}"

- name: Check unseal status
  uri:
    url: "https://127.0.0.1:8200/v1/sys/init"
    validate_certs: no
  register: vault_unseal_status_res

- name: Print the unseal check
  debug:
    msg: "{{ vault_unseal_status_res }}"

- name: Create Vault Role
  uri:
    url: "https://127.0.0.1:8200/v1/sys/auth/approle"
    method: POST
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    body: '{"type" : "approle"}'
    body_format: json
    validate_certs: no
    status_code: 204
  register: vault_role_res

- name: Create Policy
  uri:
    url: "https://127.0.0.1:8200/v1/sys/policies/acl/my-policy"
    method: POST
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    body: '{"policy":"# Dev servers have version 2 of KV secrets engine mounted by default, so will\n# need these paths to grant permissions:\npath \"secret/data/*\" {\n  capabilities = [\"create\", \"update\", \"read\"]\n}\n\npath \"secret/data/foo\" {\n  capabilities = [\"read\"]\n}\n"}'
    body_format: json
    validate_certs: no
    status_code: 204
  register: vault_policy_res

- name: Enable KV v2 secrets engine at secret/
  uri:
    url: "https://127.0.0.1:8200/v1/sys/mounts/secret"
    method: POST
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    body: '{ "type":"kv-v2" }'
    body_format: json
    validate_certs: no
    status_code: 204
  register: vault_enable_kv_res

- name: Tokens issued under the AppRole my-role should be associated with my-policy
  uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/role/my-role"
    method: POST
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    body: '{"policies": ["my-policy"]}'
    body_format: json
    validate_certs: no
    status_code: 204
  register: vault_policy_acc_res

- name: Fetch the role ID
  uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/role/my-role/role-id"
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    validate_certs: no
  register: vault_roleID_res

- name: Save init to file
  copy:
    content: "{{ vault_roleID_res }}"
    dest: /root/vault/keys/roleID

- name: Create a new secretID under my-role
  uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/role/my-role/secret-id"
    method: POST
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    validate_certs: no
  register: vault_secretID_res

- name: Save init to file
  copy:
    content: "{{ vault_secretID_res }}"
    dest: /root/vault/keys/secretID

- name: Create new token from roleID and SecretID
  uri:
    url: "https://127.0.0.1:8200/v1/auth/approle/login"
    method: POST
    headers:
      content-type: "application/json"
    body: '{"role_id": "{{ vault_roleID_res.json.data.role_id }}", "secret_id": "{{ vault_secretID_res.json.data.secret_id }}"}'
    body_format: json
    validate_certs: no
  register: vault_token_res

- name: print token
  debug:
    msg: "{{ vault_token_res }}"

- name: Set environment variable
  set_fact:
    VAULT_TOKEN: "{{ vault_token_res.json.auth.client_token }}"
  environment:
    VAULT_TOKEN: "{{ vault_token_res.json.auth.client_token }}"

- name: Save init to file
  copy:
    content: "{{ vault_token_res.json.auth.client_token }}"
    dest: /root/vault/keys/clientToken

- name: Create a secret for postgres
  uri:
    url: "https://127.0.0.1:8200/v1/secret/data/postgres"
    method: POST
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    body: '{ "data": {"password": "postgres"} }'
    body_format: json
    validate_certs: no
  register: vault_postgres_secret_res

- name: Create a secret for postgres
  uri:
    url: "https://127.0.0.1:8200/v1/secret/data/postgres"
    method: GET
    headers:
      X-Vault-Token: "{{ VAULT_TOKEN }}"
      content-type: "application/json"
    validate_certs: no
  register: vault_postgres_secret_res_pass

