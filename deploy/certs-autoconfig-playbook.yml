---
- name: Create certificates
  hosts: localhost
  become: yes
  become_user: root

  tasks:
    - name: Include group vars
      include_vars:
        file: group_vars/all.yml

    - name: Install containers.podman collection
      command: ansible-galaxy collection install community.crypto

    - name: Make sure account exists and has given contacts. We agree to TOS.
      community.crypto.acme_account:
        account_key_src: "{{ letsencrypt_account_private_key }}"
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_version: 2
        state: present
        terms_agreed: true
        contact:
        - mailto:walrussin@mailfence.com
        
    - name: "Create required directories in /root/letsencrypt"
      file:
        path: "/root/letsencrypt/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=x,o=x
      with_items:
      - account
      - certs
      - csrs
      - keys

    - name: "Generate a Let's Encrypt account key"
      shell: "if [ ! -f {{ letsencrypt_account_private_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_private_key }}; fi"

    # Using Vault to access an account key TODO
    #- name: Create a challenge for walrus.net using a account key from hashi vault.
    #  acme_certificate:
    #    account_key_content: "{{ lookup('hashi_vault', 'secret=secret/letsencrypt_account_private_key:value') }}"
    #    csr: /root/letsencrypt/csrs/walrus.net.csr
    #    fullchain_dest: /etc/httpd/ssl/walrus.net-fullchain.crt
    #  register: sample_com_challenge

    - name: "Generate Let's Encrypt private key"
      shell: "openssl genrsa 4096 | sudo tee /root/letsencrypt/keys/walrus.net.key"

    - name: "Generate Let's Encrypt CSR"
      shell: "openssl req -new -sha256 -key /root/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | sudo tee /root/letsencrypt/csrs/{{ domain_name_short }}.csr"
      args:
        executable: /bin/bash

    ### Example with DNS challenge against production ACME server ###

    - name: Begin Let's Encrypt Challenges
      acme_certificate:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_private_key }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name_short }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name_short }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name_short }}.crt"
        force: false
      register: sample_com_challenge

    - name: Create a challenge for walrus.net using a account key file.
      acme_certificate:
        account_key_src: "{{ letsencrypt_account_private_key }}"
        account_email: walrussin@mailfence.com
        src: /root/letsencrypt/csrs/walrus.net.csr
        cert: /etc/httpd/ssl/walrus.net.crt
        challenge: dns-01
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_version: 2
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
      register: sample_com_challenge

    - name: Create a challenge for walrus.net using a account key file.
      acme_certificate:
        account_key_src: "{{ letsencrypt_account_private_key }}"
        account_email: walrussin@mailfence.com
        src: /root/letsencrypt/csrs/walrus.net.csr
        cert: /etc/httpd/ssl/walrus.net.crt
        challenge: dns-01
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_version: 2
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
      register: sample_com_challenge

    # perform the necessary steps to fulfill the challenge
    # for example:
    - name: Setup for route53  
      route53:
        zone: 851725578394.realhandsonlabs.net
        record: "{{ sample_com_challenge.challenge_data['walrus.net']['dns-01'].record }}"
        type: TXT
        ttl: 60
        state: present
        wait: yes
        # Note: route53 requires TXT entries to be enclosed in quotes
        value: "{{ sample_com_challenge.challenge_data['walrus.net']['dns-01'].resource_value | regex_replace('^(.*)$', '\"\\1\"') }}"
      when: sample_com_challenge is changed and 'walrus.net' in sample_com_challenge.challenge_data
    

    - name: Let the challenge be validated and retrieve the cert and intermediate certificate
      acme_certificate:
        account_key_src: "{{ letsencrypt_account_private_key }}"
        account_email: walrussin@mailfence.com
        src: /root/letsencrypt/csrs/walrus.net.csr
        cert: /etc/httpd/ssl/walrus.net.crt
        fullchain: /etc/httpd/ssl/walrus.net-fullchain.crt
        chain: /etc/httpd/ssl/walrus.net-intermediate.crt
        challenge: dns-01
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_version: 2
        remaining_days: 60
        data: "{{ sample_com_challenge }}"
      when: sample_com_challenge is changed